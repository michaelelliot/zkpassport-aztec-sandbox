mod utils;
use dep::std;
use dep::std::println;
use dep::std::hash::keccak256;
use dep::std::hash::sha256;
use dep::std::ecdsa_secp256k1::verify_signature;
use dep::std::collections::vec::Vec;
use dep::sha1::sha1;
use dep::biguint::{ BigUint56, MAX_BYTES };
use utils::{
    convert_string_to_u16,
    convert_short_date_string_to_parts,
    str_to_u8_array,
    verify_date1_earlier_than_date2,
    u32_to_u8,
    bytes_to_u32,
    copy_bytes,
    copy_from_msg,
    sha256_size,
    arr_copy_u8_to_field,
    copy_from_msg_x_offset
};

fn verify_active_auth_signed_response_1024bit_pubkey(
    challenge: [u8; 8],
    sig: BigUint56,
    pubkey: BigUint56,
    final_e: BigUint56,
    sig_quotient: BigUint56) -> bool
{
    let mut success = true;
    // To decrypt: (sig*final_e)-(pubkey*sig_quotient)
    let dividend = sig.mul(final_e);
    let response_decrypted_biguint = dividend.0.sub(pubkey.mul(sig_quotient).0);
    let response_decrypted_bytes: [u8; 133] = response_decrypted_biguint.to_bytes_first_x(); // 133 fits 128 bytes where each limb is 7 bytes
    let response_decrypted: [u8; 128] = copy_from_msg(response_decrypted_bytes, 5, 128); // 1024 bits = 128 bytes

    let hash_length = 20;
    // // SHA-1 (160 bits for SHA-1 -> 20 bytes)
    // if response_decrypted[127] == 0xbc { 20 }
    // else if response_decrypted[127] == 0x33 { 20 }
    // // SHA-256 (256 bits for SHA-256 -> 32 bytes)
    // else if response_decrypted[127] == 0x34 { 32 }
    // // SHA-512 (512 bits for SHA-512 -> 64 bytes)
    // else if response_decrypted[127] == 0x35 { 64 }
    // // SHA-384 (384 bits for SHA-384 -> 48 bytes)
    // else if response_decrypted[127] == 0x36 { 48 }
    // // SHA-224 (224 bits for SHA-224 -> 28 bytes)
    // else if response_decrypted[127] == 0x38 { 28 }
    // else { 0 };
    if hash_length > 0 {
        let mut message: [u8; 192] = copy_bytes(response_decrypted, 2, response_decrypted.len() as u16-hash_length-3);
        let digest: [u8; 20] = copy_bytes(response_decrypted, 128-hash_length-1, hash_length);
        // Copy challenge onto end of message so we can hash
        // the result and compare against expected hash
        for i in 0..8 {
            message[response_decrypted.len() as u16-hash_length-3+i] = challenge[i];
        }
        let calc_digest: [u8; 20] =
            if hash_length == 20 { sha1(message, response_decrypted.len() as u16-hash_length-3+8) }
            // else if hash_length == 32 { sha256(message) }
            else { [0; 20] };
        if digest != calc_digest {
            success = false;
        }
    } else {
        success = false;
    }

    success
}

// ------------------------------------------
// TD3 Data Structure Reference
// ------------------------------------------
// 	Name of Data Element	        Length
// A	Document code	                2
// B	Issuing State or organization	3
// C	Name of holder	                39
// D	Document number	                9
// E	Check digit — Document number	1
// F	Nationality	                    3
// G	Date of birth	                6
// H	Check digit — Date of birth	    1
// I	Sex	                            1
// J	Date of expiry	                6
// K	Check digit — Date of expiry	1
// L	Optional data	                14
// M	Check digit	                    1
// N	Composite check digit	        1
// ------------------------------------------
// TD3 length is always 88 bytes
// TD3 looks like this: AABBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDEFFFGGGGGGHIJJJJJJKLLLLLLLLLLLLLLMN
// --------------------------------------------------
fn verify_dg1_td3<M>(
    msg: [u8; M],
    check_name: [u8; 39],
    check_nationality: [u8; 3],
    check_expiry: [u8; 6],
    ) -> bool
{
    let mut success = true;
    // 61      0x40 (Application class) + 0x20 (constructed structure indicates inner components) + 0x01 (Tag ID)
    // 5B      The length of the data to follow is 91 bytes (indicates TD3)
    // 5F 1F   MRZ Data Tag
    // 58      The length of the data to follow is 88 bytes (indicates TD3)
    if msg[0] != 0x61 { success = false; }
    if msg[1] != 0x5B { success = false; }
    if msg[2] != 0x5F { success = false; }
    if msg[3] != 0x1F { success = false; }
    if msg[4] != 0x58 { success = false; }

    let o = 5;
    let name: [u8; 39] = [msg[o+5], msg[o+6], msg[o+7], msg[o+8], msg[o+9], msg[o+10], msg[o+11], msg[o+12], msg[o+13], msg[o+14], msg[o+15], msg[o+16], msg[o+17], msg[o+18], msg[o+19], msg[o+20], msg[o+21], msg[o+22], msg[o+23], msg[o+24], msg[o+25], msg[o+26], msg[o+27], msg[o+28], msg[o+29], msg[o+30], msg[o+31], msg[o+32], msg[o+33], msg[o+34], msg[o+35], msg[o+36], msg[o+37], msg[o+38], msg[o+39], msg[o+40], msg[o+41], msg[o+42], msg[o+43]];
    let nationality: [u8; 3] = [msg[o+54], msg[o+55], msg[o+56]];
    let expiry: [u8; 6] = [msg[o+65], msg[o+66], msg[o+67], msg[o+68], msg[o+69], msg[o+70]];

    if name != check_name { success = false; }
    if nationality != check_nationality { success = false; }
    if expiry != check_expiry { success = false; }

    success
}

fn verify_signed_hashes_dg1<DG1,SH,SA,S>(
    dg1: [u8; DG1],
    dg1_hash_offset: u16,
    signed_hashes: [u8; SH],
    signed_hashes_len: u16,
    signed_attributes: [u8; SA],
    signed_attributes_len: u16,
    message_digest_offset: u16,
    sod_sig: BigUint56,
    sod_pubkey: BigUint56,
    sod_final_e: BigUint56,
    sod_sig_quotient: BigUint56,
    // Offset of signed_attributes_hash inside decrypted signature (which is a PKCS#1 v1.5 padded signature)
    signed_attributes_hash_offset: u16,
    ) -> bool
{
    let mut success = true;
    // Verify sha256 of dg1 exists in signed_hashes
    // (check at provided offset dg1_hash_offset)
    let dg1_hash = sha256(dg1);
    for i in 0..32 {
        if dg1_hash[i] != signed_hashes[i+dg1_hash_offset] {
            success = false;
        }
    }
    // Verify sha256 of signed_hashes (called the message digest hash) exists in message_digest_data
    // (check at provided offset message_digest_offset)
    let message_digest_hash: [u8; 32] = sha256_size(signed_hashes, signed_hashes_len);
    for i in 0..32 {
        if message_digest_hash[i] != signed_attributes[i+message_digest_offset] {
            success = false;
        }
    }
    // To decrypt: (sig*final_e)-(pubkey*sig_quotient)
    let dividend = sod_sig.mul(sod_final_e).0;
    let mul_result = sod_pubkey.mul(sod_sig_quotient).0;
    let sig_decrypted = dividend.sub(mul_result);
    let sig_decrypted_bytes: [u8; 35] = sig_decrypted.to_bytes_first_x();
    let signed_attributes_hash: [u8; 32] = sha256_size(signed_attributes, signed_attributes_len);
    for i in 0..32 {
        if signed_attributes_hash[i] != sig_decrypted_bytes[i+signed_attributes_hash_offset] {
            success = false;
        }
    }
    success
}

fn verify_signed_hashes_dg1_dg15<DG1,DG15,SH,SA,S>(
    dg1: [u8; DG1],
    dg1_hash_offset: u16,
    dg15: [u8; DG15],
    dg15_len: u16,
    dg15_hash_offset: u16,
    signed_hashes: [u8; SH],
    signed_hashes_len: u16,
    signed_attributes: [u8; SA],
    signed_attributes_len: u16,
    message_digest_offset: u16,
    sod_sig: BigUint56,
    sod_pubkey: BigUint56,
    sod_final_e: BigUint56,
    sod_sig_quotient: BigUint56,
    // Offset of signed_attributes_hash inside decrypted signature (which is a PKCS#1 v1.5 padded signature)
    signed_attributes_hash_offset: u16,
    ) -> bool
{
    let mut success = true;
    // Verify sha256 of dg1 exists in signed_hashes
    // (check at provided offset dg1_hash_offset)
    let dg1_hash = sha256(dg1);
    for i in 0..32 {
        if dg1_hash[i] != signed_hashes[i+dg1_hash_offset] {
            success = false;
        }
    }
    // Verify sha256 of dg15 exists in signed_hashes
    // (check at provided offset dg1_hash_offset)
    let dg15_hash: [u8; 32] = sha256_size(dg15, dg15_len);
    for i in 0..32 {
        if dg15_hash[i] != signed_hashes[i+dg15_hash_offset] {
            success = false;
        }
    }
    // Verify sha256 of signed_hashes (called the message digest hash) exists in message_digest_data
    // (check at provided offset message_digest_offset)
    let message_digest_hash: [u8; 32] = sha256_size(signed_hashes, signed_hashes_len);
    for i in 0..32 {
        if message_digest_hash[i] != signed_attributes[i+message_digest_offset] {
            success = false;
        }
    }
    // To decrypt: (sig*final_e)-(pubkey*sig_quotient)
    let dividend = sod_sig.mul(sod_final_e).0;
    let mul_result = sod_pubkey.mul(sod_sig_quotient).0;
    let sig_decrypted = dividend.sub(mul_result);
    let sig_decrypted_bytes: [u8; 35] = sig_decrypted.to_bytes_first_x();
    let signed_attributes_hash: [u8; 32] = sha256_size(signed_attributes, signed_attributes_len);
    for i in 0..32 {
        if signed_attributes_hash[i] != sig_decrypted_bytes[i+signed_attributes_hash_offset] {
            success = false;
        }
    }
    success
}

fn verify_older_than_x_years(dob: (u16, u16, u16), now: (u16, u16, u16), years: u16) -> bool {
    let year_diff = utils::get_year_difference(dob.0, dob.1, dob.2, now.0, now.1, now.2);
    year_diff >= years
}

#[test]
fn test_verify_older_than_x_years() {
    let older = verify_older_than_x_years((2000, 1, 1), (2018, 1, 1), 18);
    assert(older == true);
    let older = verify_older_than_x_years((2000, 1, 1), (2017, 12, 31), 18);
    assert(older == false);
}

fn verify_date_is_valid(date: (u16, u16, u16)) -> bool {
    if date.0 > 2100      { false }
    else if date.0 < 1900 { false }
    else if date.1 == 0   { false }
    else if date.1 > 12   { false }
    else if date.2 == 0   { false }
    else if date.2 > 31   { false }
    else                  { true }
}

#[test]
fn test_verify_date_is_valid() {
    assert(verify_date_is_valid((2000, 1, 1)) == true);
    assert(verify_date_is_valid((2000, 13, 1)) == false);
    assert(verify_date_is_valid((2000, 1, 32)) == false);
    assert(verify_date_is_valid((2101, 1, 1)) == false);
    assert(verify_date_is_valid((2000, 0, 1)) == false);
    assert(verify_date_is_valid((2000, 1, 0)) == false);
    assert(verify_date_is_valid((1899, 1, 1)) == false);
}

unconstrained
fn verify_zkpassport_country(
    dg1: [u8; 93],
    name: [u8; 39],
    nationality: [u8; 3],
    expiry: [u8; 6],
    current_year: u16,
    current_month: u16,
    current_day: u16,
    pivot_year: u16,
    sod_sig: [u8; 256],
    sod_pubkey: [u8; 256],
    sod_final_e: [u8; 256],
    sod_sig_quotient: [u8; 256],
    dg15: [u8; 512],
    dg15_len: u16,
    signed_hashes: [u8; 256],
    signed_hashes_len: u16,
    signed_hashes_dg1_hash_offset: u16,
    signed_hashes_dg15_hash_offset: u16,
    signed_attributes: [u8; 256],
    signed_attributes_len: u16,
    signed_attributes_signed_hashes_hash_offset: u16,
    sig_decrypted_signed_attributes_hash_offset: u16,
    cert_pubkeys_mtree_root: Field,
    cert_pubkeys_mtree_index: Field,
    cert_pubkeys_mtree_hashpath: [Field; 8],
    countries_mtree_root: Field,
    countries_mtree_index: Field,
    countries_mtree_hashpath: [Field; 8],
    ) -> Field
{
    // --------------------------------------------------------------------------------
    // Verify document signer certificate public key `sod_pubkey` exists in merkle tree
    // --------------------------------------------------------------------------------
    let valid = verify_sod_pubkey(sod_pubkey, cert_pubkeys_mtree_root, cert_pubkeys_mtree_index, cert_pubkeys_mtree_hashpath);
    assert(valid, "Document signer cert public key is not valid");

    // ---------------------------------------------------------------------
    // Verify `name`, `nationality`, `expiry` inputs against `DG1 TD3` input
    // ---------------------------------------------------------------------
    let valid = verify_dg1_td3(dg1, name, nationality, expiry);
    assert(valid, "Inputs don't match corresponding values in DG1 TD3 data");

    // ----------------------------------------------------
    // Verify `nationality` exists in countries merkle tree
    // ----------------------------------------------------
    let valid = verify_country(nationality, countries_mtree_root, countries_mtree_index, countries_mtree_hashpath);
    assert(valid, "Failed to verify country exists in merkle tree");

    // -------------------------------
    // Verify passport has not expired
    // -------------------------------
    let current_date = (current_year, current_month, current_day);
    let (expiry_year, expiry_month, expiry_day) = convert_short_date_string_to_parts(expiry, pivot_year);
    assert(verify_date_is_valid((expiry_year, expiry_month, expiry_day)) == true, "Invalid expiry date");
    let valid = verify_date1_earlier_than_date2(current_date, (expiry_year, expiry_month, expiry_day));
    assert(valid, "Passport expired");

    // --------------------------------------------------------------------------
    // SOD verification / signed hashes verification using passport issuer pubkey
    // --------------------------------------------------------------------------
    let sig_biguint = BigUint56::from_bytes_256(sod_sig);
    let pubkey_biguint = BigUint56::from_bytes_256(sod_pubkey);
    let final_e_biguint = BigUint56::from_bytes_256(sod_final_e);
    let sig_quotient_biguint = BigUint56::from_bytes_256(sod_sig_quotient);
    let valid_signed_hashes = verify_signed_hashes_dg1_dg15(
        dg1,
        signed_hashes_dg1_hash_offset,
        dg15,
        dg15_len,
        signed_hashes_dg15_hash_offset,
        signed_hashes,
        signed_hashes_len,
        signed_attributes,
        signed_attributes_len,
        signed_attributes_signed_hashes_hash_offset,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        sig_quotient_biguint,
        sig_decrypted_signed_attributes_hash_offset);
    assert(valid_signed_hashes, "Unable to verify signed hashes");

    // Return anonymous identifier tied to this passport
    gen_anon_id(dg1, dg15)
}

unconstrained
fn verify_zkpassport_country_active_auth(
    dg1: [u8; 93],
    name: [u8; 39],
    nationality: [u8; 3],
    expiry: [u8; 6],
    current_year: u16,
    current_month: u16,
    current_day: u16,
    pivot_year: u16,
    active_auth_challenge: [u8; 8],
    sod_sig: [u8; 256],
    sod_pubkey: [u8; 256],
    sod_final_e: [u8; 256],
    sod_sig_quotient: [u8; 256],
    dg15: [u8; 512],
    dg15_len: u16,
    signed_hashes: [u8; 256],
    signed_hashes_len: u16,
    signed_hashes_dg1_hash_offset: u16,
    signed_hashes_dg15_hash_offset: u16,
    signed_attributes: [u8; 256],
    signed_attributes_len: u16,
    signed_attributes_signed_hashes_hash_offset: u16,
    sig_decrypted_signed_attributes_hash_offset: u16,
    active_auth_dg15_pubkey_offset: u16,
    active_auth_sig: [u8; 128],
    active_auth_final_e: [u8; 128],
    active_auth_sig_quotient: [u8; 128],
    cert_pubkeys_mtree_root: Field,
    cert_pubkeys_mtree_index: Field,
    cert_pubkeys_mtree_hashpath: [Field; 8],
    countries_mtree_root: Field,
    countries_mtree_index: Field,
    countries_mtree_hashpath: [Field; 8],
    ) -> Field
{
    // --------------------------------------------------------------------------------
    // Verify document signer certificate public key `sod_pubkey` exists in merkle tree
    // --------------------------------------------------------------------------------
    let valid = verify_sod_pubkey(sod_pubkey, cert_pubkeys_mtree_root, cert_pubkeys_mtree_index, cert_pubkeys_mtree_hashpath);
    assert(valid, "Document signer cert public key is not valid");

    // ---------------------------------------------------------------------
    // Verify `name`, `nationality`, `expiry` inputs against `DG1 TD3` input
    // ---------------------------------------------------------------------
    let valid = verify_dg1_td3(dg1, name, nationality, expiry);
    assert(valid, "Inputs don't match corresponding values in DG1 TD3 data");

    // ----------------------------------------------------
    // Verify `nationality` exists in countries merkle tree
    // ----------------------------------------------------
    let valid = verify_country(nationality, countries_mtree_root, countries_mtree_index, countries_mtree_hashpath);
    assert(valid, "Failed to verify country exists in merkle tree");

    // -------------------------------
    // Verify passport has not expired
    // -------------------------------
    let current_date = (current_year, current_month, current_day);
    let (expiry_year, expiry_month, expiry_day) = convert_short_date_string_to_parts(expiry, pivot_year);
    assert(verify_date_is_valid((expiry_year, expiry_month, expiry_day)) == true, "Invalid expiry date");
    let valid = verify_date1_earlier_than_date2(current_date, (expiry_year, expiry_month, expiry_day));
    assert(valid, "Passport expired");

    // --------------------------------------------------------------------------
    // SOD verification / signed hashes verification using passport issuer pubkey
    // --------------------------------------------------------------------------
    let sig_biguint = BigUint56::from_bytes_256(sod_sig);
    let pubkey_biguint = BigUint56::from_bytes_256(sod_pubkey);
    let final_e_biguint = BigUint56::from_bytes_256(sod_final_e);
    let sig_quotient_biguint = BigUint56::from_bytes_256(sod_sig_quotient);
    let valid_signed_hashes = verify_signed_hashes_dg1_dg15(
        dg1,
        signed_hashes_dg1_hash_offset,
        dg15,
        dg15_len,
        signed_hashes_dg15_hash_offset,
        signed_hashes,
        signed_hashes_len,
        signed_attributes,
        signed_attributes_len,
        signed_attributes_signed_hashes_hash_offset,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        sig_quotient_biguint,
        sig_decrypted_signed_attributes_hash_offset);
    assert(valid_signed_hashes, "Unable to verify signed hashes");

    // ---------------------
    // Active Authentication
    // ---------------------
    // Copy the active auth pubkey from the DG15 data group
    let active_auth_pubkey: [u8; 128] = copy_from_msg_x_offset(dg15, active_auth_dg15_pubkey_offset);
    // Verify the signed challenge with the active auth pubkey
    let active_auth_sig_biguint = BigUint56::from_bytes_128(active_auth_sig);
    let active_auth_pubkey_biguint = BigUint56::from_bytes_128(active_auth_pubkey);
    let active_auth_final_e_biguint = BigUint56::from_bytes_128(active_auth_final_e);
    let active_auth_sig_quotient_biguint = BigUint56::from_bytes_128(active_auth_sig_quotient);
    let valid_active_auth_signed_response = verify_active_auth_signed_response_1024bit_pubkey(
        active_auth_challenge,
        active_auth_sig_biguint,
        active_auth_pubkey_biguint,
        active_auth_final_e_biguint,
        active_auth_sig_quotient_biguint);
    assert(valid_active_auth_signed_response, "Unable to verify ActiveAuth");

    // Return anonymous identifier tied to this passport
    gen_anon_id(dg1, dg15)
}

// Generate an anonymous identifier pedersen hash using data group 1 and 15
fn gen_anon_id<M,N>(dg1: [u8; M], dg15: [u8; N]) -> Field {
    let mut anon_id: Vec<Field> = Vec::new();
    for x in dg1 {
        anon_id.push(x as Field);
    }
    for x in dg15 {
        anon_id.push(x as Field);
    }
    std::hash::pedersen_hash(anon_id.slice)
}

// Verify that the country exists in the allowed countries merkle tree
fn verify_country(country: [u8; 3], root: Field, index: Field, hash_path: [Field; 8]) -> bool {
    let leaf = (country[2] as u24 + (country[1] as u24 << 8)  + (country[0] as u24 << 16) as u24) as Field;
    let computed_root = std::merkle::compute_merkle_root(leaf, index, hash_path);
    computed_root == root
}

// Verify that the sod_pubkey exists in the certificate public keys merkle tree
fn verify_sod_pubkey<M>(sod_pubkey: [u8; M], root: Field, index: Field, hash_path: [Field; 8]) -> bool {
    let leaf = std::hash::pedersen_hash(arr_copy_u8_to_field(sod_pubkey));
    let computed_root = std::merkle::compute_merkle_root(leaf, index, hash_path);
    computed_root == root
}

#[test]
fn test_verify_zkpassport_country() {
    // SILVERHAND<<JOHNNY<<<<<<<<<<<<<<<<<<<<<
    let name: [u8; 39] = [
        0x53,0x49,0x4c,0x56,0x45,0x52,0x48,0x41,0x4e,0x44,0x3c,0x3c,0x4a,0x4f,0x48,0x4e,
        0x4e,0x59,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,
        0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c];
    let nationality: [u8; 3] = [0x43,0x59,0x42]; // CYB
    let expiry: [u8; 6] = [0x33,0x30,0x30,0x31,0x30,0x31]; // 300101 (1st Jan 2030)
    let current_year: u16 = 2024;
    let current_month: u16 = 1;
    let current_day: u16 = 1;
    let pivot_year: u16 = 24 + 15; // Should give enough margin for expiry year
    // P<CYBSILVERHAND<<JOHNNY<<<<<<<<<<<<<<<<<<<<<PA12345<<8CYB8811167M300101912345<<<<<<<<<94
    let dg1: [u8; 93] = [
        0x61,0x5b,0x5f,0x1f,0x58,0x50,0x3c,0x43,0x59,0x42,0x53,0x49,0x4c,0x56,0x45,0x52,
        0x48,0x41,0x4e,0x44,0x3c,0x3c,0x4a,0x4f,0x48,0x4e,0x4e,0x59,0x3c,0x3c,0x3c,0x3c,
        0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,
        0x3c,0x50,0x41,0x31,0x32,0x33,0x34,0x35,0x3c,0x3c,0x38,0x43,0x59,0x42,0x38,0x38,
        0x31,0x31,0x31,0x36,0x37,0x4d,0x33,0x30,0x30,0x31,0x30,0x31,0x39,0x31,0x32,0x33,
        0x34,0x35,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x34];
    let dg15: [u8; 512] = [
        0x6f,0x81,0xa2,0x30,0x81,0x9f,0x30,0x0d,0x06,0x09,0x2a,0x86,0x48,0x86,0xf7,0x0d,
        0x01,0x01,0x01,0x05,0x00,0x03,0x81,0x8d,0x00,0x30,0x81,0x89,0x02,0x81,0x81,0x00,
        // Pubkey start
        0x81,0xa9,0x7a,0x0d,0x65,0x2f,0xa2,0x68,0xd2,0x78,0xa6,0x38,0x18,0xe0,0x8a,0xd4,
        0x59,0x03,0xeb,0xa9,0x32,0x38,0x31,0x72,0x35,0x6b,0x2c,0xfe,0x8e,0xfa,0xba,0x85,
        0xd1,0xe5,0xea,0x31,0x4f,0xd7,0x87,0x11,0xa5,0xb7,0x38,0x5c,0xd7,0x63,0xbb,0xbe,
        0xbd,0x4c,0x32,0x0a,0x91,0x47,0x61,0xc9,0x11,0x93,0xcd,0xd4,0xa8,0x28,0xe1,0xcf,
        0x83,0x83,0x7e,0xee,0x73,0xcd,0x89,0x46,0xf0,0x36,0xfc,0x68,0xc9,0x7c,0x64,0xfa,
        0x19,0xfc,0x96,0x9f,0x1c,0x7d,0x2a,0xd0,0xd8,0x20,0xf4,0xd4,0x6f,0xbf,0x43,0x1b,
        0x9a,0x9e,0x93,0xfd,0x4c,0xd1,0xdc,0x61,0x1e,0x1b,0x29,0x7c,0xe6,0x11,0x7b,0x38,
        0xb5,0x79,0x2c,0xcb,0xb7,0xf6,0xbb,0x48,0xea,0x80,0xd5,0x87,0x16,0xc4,0xa6,0xa1,
        // Pubkey end
        0x02,0x03,0x01,0x00,0x01,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
    let dg15_len = 165;
    // PKCS #7 signed data (DER encoded ASN.1 structure)
    let signed_hashes: [u8; 256] = [
        0x30,0x81,0x87,0x02,0x01,0x00,0x30,0x0b,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,
        0x04,0x02,0x01,0x30,0x75,0x30,0x25,0x02,0x01,0x01,0x04,0x20,0x9f,0x17,0x38,0xf9,
        0x80,0xbf,0xe6,0xd8,0x0c,0x4c,0xe8,0xa6,0xcb,0xf8,0xac,0x94,0x78,0xab,0x99,0x73,
        0x1e,0x7e,0x48,0xf0,0x4f,0x2c,0xf4,0x13,0x44,0xf4,0x1e,0xae,0x30,0x25,0x02,0x01,
        0x02,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x30,0x25,0x02,0x01,0x0f,0x04,0x20,0xb3,0xd3,0xf5,0x10,0x1c,0x33,
        0x05,0x93,0x2c,0x96,0xd3,0xca,0x20,0xf9,0x80,0xb9,0x83,0x49,0x1d,0xb3,0x2a,0x93,
        0xfa,0x6f,0x7c,0x13,0x74,0x78,0xb6,0x91,0x90,0x46,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
    let signed_hashes_len = 138;
    let signed_hashes_dg1_hash_offset: u16 = 28;
    let signed_hashes_dg15_hash_offset: u16 = 106;
    // Signed attributes (DER encoded ASN.1 structure)
    let signed_attributes: [u8; 256] = [
        0x31,0x48,0x30,0x15,0x06,0x09,0x2a,0x86,0x48,0x86,0xf7,0x0d,0x01,0x09,0x03,0x31,
        0x08,0x06,0x06,0x67,0x81,0x08,0x01,0x01,0x01,0x30,0x2f,0x06,0x09,0x2a,0x86,0x48,
        0x86,0xf7,0x0d,0x01,0x09,0x04,0x31,0x22,0x04,0x20,0x81,0xdd,0x40,0xb6,0x2f,0x65,
        0x19,0x38,0xe9,0x65,0x5b,0xa7,0x97,0x85,0xfc,0x7a,0x5e,0x78,0x68,0xdd,0x46,0xd4,
        0xc6,0x08,0x28,0xb1,0xdb,0x75,0x48,0xbb,0x48,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
    let signed_attributes_len = 74;
    let signed_attributes_signed_hashes_hash_offset: u16 = 42;
    let sig_decrypted_signed_attributes_hash_offset: u16 = 3; // Only 3 when only the first 35 bytes are converted for checking via to_bytes_first_x()
    // Document Security Object (SOD) signature
    let sod_sig: [u8; 256] = [
        0x35,0x0f,0x94,0xab,0x11,0x96,0x29,0x31,0xf3,0xeb,0xd5,0xc9,0xa4,0x23,0xce,0x91,
        0x7a,0x90,0x56,0x03,0xbe,0xb2,0xa0,0x6f,0x0e,0x8f,0xfd,0x75,0x05,0xa9,0x61,0xd6,
        0x0a,0xa6,0xd6,0x54,0x51,0x75,0x70,0x90,0x52,0x42,0x66,0xee,0x83,0xd5,0x26,0xdc,
        0x0c,0x55,0x69,0x61,0xa5,0xa8,0x16,0x90,0xf4,0xd5,0x08,0xdf,0xc0,0x41,0xda,0x41,
        0x16,0xc2,0xf3,0xef,0x00,0xc4,0x8a,0xfd,0x59,0xc5,0xca,0x53,0xc3,0xab,0xca,0x21,
        0xf4,0xe8,0x75,0x5c,0x28,0x4f,0x12,0xca,0x16,0xfc,0x25,0x8d,0xc6,0x9f,0x11,0x45,
        0xf5,0xc8,0xc7,0x96,0x1f,0xd3,0x7a,0x1a,0x43,0x6e,0xd7,0x63,0x52,0x9a,0x70,0x14,
        0xe1,0x2f,0xf9,0x89,0x92,0x3f,0x95,0x49,0x3f,0xd5,0xb7,0xaa,0xdb,0xa0,0x59,0xc4,
        0xdb,0xa4,0xe9,0xe2,0x07,0xd3,0x51,0x60,0x5a,0x86,0xe1,0x89,0x54,0xa6,0x6b,0xb4,
        0xea,0xf8,0xaa,0x42,0x5d,0x0f,0xd2,0x9b,0xda,0x67,0xad,0xf0,0xc0,0x2f,0x06,0x23,
        0xcd,0x31,0x96,0x5a,0xb5,0x27,0xa3,0xf0,0xe7,0x1b,0x8d,0xb7,0x59,0xeb,0xc3,0x26,
        0xae,0xf1,0xf2,0xbd,0xcd,0x41,0x1a,0x6d,0x5c,0x18,0xc9,0x55,0x4d,0x40,0x3d,0x0f,
        0x15,0xbd,0x6f,0xf3,0x8f,0xfa,0xc9,0xa0,0x8a,0x60,0x10,0x0d,0xc0,0x06,0x1e,0x61,
        0xb5,0xf8,0x44,0x8e,0x94,0x66,0xba,0x69,0x0f,0x91,0x9e,0xbd,0x51,0x52,0xf3,0xfa,
        0xdf,0x62,0x51,0x17,0x28,0x9e,0x95,0x49,0x8e,0xf7,0x3f,0x8f,0xdd,0x84,0x01,0x8b,
        0x05,0xec,0xf8,0x9a,0x24,0xa4,0xdf,0x1f,0x0c,0x36,0x26,0x66,0x6f,0x0f,0x62,0x8b];
    let sod_pubkey: [u8; 256] = [
        0x86,0xa9,0xef,0x08,0x1c,0x5f,0x54,0xea,0xd1,0x56,0x57,0xa2,0x82,0x13,0x33,0xbb,
        0xe2,0x28,0xad,0x21,0x2b,0xbb,0x5c,0x2d,0x35,0x4c,0x27,0x06,0x59,0x88,0x28,0x05,
        0x99,0x11,0x50,0x7f,0xfb,0x7f,0xa2,0x72,0xc7,0xd7,0xd9,0x87,0x17,0x9f,0x4f,0xc3,
        0xfd,0x18,0xdd,0x57,0x7f,0x24,0xf3,0x56,0xb5,0xa8,0xec,0x7f,0x13,0xb3,0xa0,0xb6,
        0xde,0xce,0xda,0x2f,0x1f,0xca,0x01,0x9f,0x25,0xc6,0x2d,0x18,0xd3,0xb2,0x31,0xeb,
        0xb4,0xc9,0x56,0x49,0x2a,0xd7,0x6d,0xfe,0x7c,0x8d,0x53,0x07,0x6d,0xc5,0x0f,0x11,
        0xa0,0x92,0x8d,0xd0,0x9e,0xac,0xcd,0x7f,0x2f,0xb3,0xfd,0x91,0x10,0x9c,0x79,0x40,
        0xc2,0x0b,0xb5,0x94,0x2a,0x5b,0xf2,0xf0,0x2f,0x27,0x23,0x50,0xd2,0x63,0xf5,0x85,
        0x50,0x13,0x9a,0x75,0x4f,0x2d,0x50,0xd7,0xf3,0x7f,0x39,0x33,0xfd,0x95,0xa1,0xd1,
        0x61,0x2f,0x9e,0x0b,0x86,0xdb,0xf6,0x7c,0x8b,0xed,0x9f,0x9f,0x87,0xd1,0x36,0x89,
        0xcb,0x5e,0x10,0xda,0xc9,0x60,0x73,0x06,0xce,0x8f,0xeb,0x65,0x42,0x36,0x55,0x75,
        0xc0,0xc1,0xa7,0x3c,0x8d,0x30,0x7f,0x62,0x33,0xfe,0x4c,0x32,0x6c,0x15,0x20,0xfc,
        0xb4,0x4a,0x59,0x58,0x5f,0xa9,0xca,0x56,0xd1,0xc0,0x65,0x66,0x2a,0x6d,0xb7,0x4e,
        0x22,0x98,0xec,0x52,0xd7,0x3b,0x52,0x25,0x42,0xea,0xcb,0x6e,0xf2,0x85,0x05,0xa0,
        0x2b,0x0c,0x8a,0x63,0x53,0xc9,0x22,0xbc,0x53,0x45,0x9f,0x42,0x03,0x44,0x37,0x32,
        0x51,0x56,0x35,0xa4,0xe5,0x46,0xd8,0xac,0xf3,0x24,0xfc,0x96,0xc3,0x79,0x5b,0x63];
    let sod_final_e: [u8; 256] = [
        0x4f,0xa9,0x31,0x11,0xb9,0xc6,0x94,0x6d,0xc1,0x45,0xa2,0x78,0x72,0x3a,0xf6,0x3a,
        0xb3,0x7f,0x83,0xf2,0x16,0x63,0x38,0x7e,0x97,0xc3,0x79,0x3e,0x66,0x02,0xbb,0x31,
        0xc7,0x18,0x9b,0x75,0x8b,0xba,0x81,0x04,0x58,0x7a,0x50,0x20,0x86,0xf8,0x81,0xb4,
        0x58,0xbf,0x6d,0xd8,0x40,0x47,0x0b,0x45,0xf3,0x89,0x00,0x91,0x6b,0x07,0xd5,0x90,
        0x06,0xc1,0xef,0x54,0xc4,0x77,0x27,0xf0,0xae,0xa3,0x82,0x9d,0x05,0x49,0x15,0xf6,
        0x40,0xf4,0xf9,0xbc,0xee,0x38,0x12,0x91,0x8e,0xbe,0x77,0x6a,0x05,0x70,0x38,0x37,
        0x65,0x62,0x08,0xb9,0x9b,0xa6,0x58,0x58,0x1b,0x2d,0x97,0xae,0x28,0x28,0xae,0xc9,
        0x55,0xbf,0xc6,0xc1,0x7b,0x86,0x38,0x8c,0x81,0xbe,0x79,0xe7,0x2a,0x67,0xa1,0x95,
        0xa4,0xb0,0x64,0x90,0x33,0x00,0x06,0x0f,0x4f,0x1c,0xc7,0x28,0x45,0x10,0xec,0x79,
        0xda,0xb4,0x32,0xd8,0xab,0xb1,0x4e,0x3f,0xbd,0xde,0x30,0x79,0x7e,0x35,0x7d,0xbc,
        0x28,0x83,0x1b,0xb6,0xce,0x82,0x1e,0xf6,0xce,0x43,0x42,0xe1,0xe0,0x80,0x8f,0x06,
        0x19,0x75,0xe3,0x6b,0x64,0x55,0xca,0x60,0x5c,0xd2,0x3b,0x31,0x21,0x81,0x6a,0xef,
        0xd6,0x84,0xa7,0xa1,0x5c,0x6b,0x55,0xf3,0x06,0x1a,0x2a,0xb5,0xea,0x21,0x41,0x4c,
        0x35,0xa0,0x14,0xd0,0x6b,0x8f,0x14,0x0b,0xbe,0x8d,0x15,0xbb,0xe0,0x49,0x98,0xe3,
        0xed,0xfa,0xe2,0x26,0x18,0x1b,0xa0,0x54,0xe9,0x36,0xe5,0xd3,0x1c,0x96,0x3d,0x4f,
        0xa2,0x4f,0x1c,0xb5,0xbe,0x6e,0xea,0x44,0xdf,0xae,0x67,0x13,0xfd,0x62,0x3a,0x7e];
    let sod_sig_quotient: [u8; 256] = [
        0x1f,0x63,0x6b,0xbc,0x79,0xd1,0x87,0x3d,0x78,0xc6,0xc8,0x18,0x0a,0x46,0x70,0x4a,
        0xc3,0x0d,0x5f,0xaa,0xd0,0xc6,0xc1,0x0b,0x2c,0xb2,0xe3,0x4e,0xe7,0x78,0xd1,0xc3,
        0x6b,0xad,0x49,0x6b,0x84,0x7b,0xe5,0x46,0x5f,0xc8,0x30,0xd5,0xae,0x3d,0x5e,0x2b,
        0xa0,0xfe,0x3d,0xdc,0xc0,0x1d,0x82,0x6e,0x81,0x47,0x67,0x5e,0xc1,0xa9,0x81,0x11,
        0xae,0xfc,0xb7,0xf9,0x6b,0x25,0x9b,0x1f,0x7b,0x06,0xfe,0x69,0x4b,0x10,0x82,0x75,
        0xd3,0xa1,0x34,0x56,0x82,0xff,0xa3,0x11,0x37,0x0f,0x67,0x62,0xea,0x49,0x73,0xf0,
        0xd7,0xc1,0x9a,0xf8,0xe6,0xf9,0x8c,0x99,0x84,0xa0,0x49,0x18,0xe0,0x96,0x01,0x13,
        0x6b,0x95,0x28,0x71,0x3f,0x5d,0xc1,0xad,0x2e,0xcb,0x25,0x2d,0x07,0xc4,0xca,0x92,
        0xdb,0xb2,0x59,0x71,0x9a,0x5a,0x38,0x48,0x23,0x1a,0x03,0x61,0x33,0x87,0xec,0x6e,
        0xad,0xc8,0xbc,0xe3,0x54,0x74,0x6f,0x9b,0x35,0x8d,0xbb,0x2c,0xa0,0xe2,0x22,0x0c,
        0x93,0x23,0xf1,0x35,0xfc,0x02,0xff,0xf5,0x5d,0xab,0x14,0x66,0x36,0x79,0x26,0x33,
        0x97,0xef,0x1c,0xbf,0x96,0x07,0x92,0x2d,0x08,0x8a,0xd1,0x1b,0x3e,0xba,0x1c,0x08,
        0x98,0xe2,0x11,0x1a,0x1a,0xa2,0x9f,0xad,0x84,0x81,0x2d,0x08,0x5b,0xd1,0xaa,0xe3,
        0x55,0x04,0xbb,0x34,0xde,0x07,0xd9,0x99,0x83,0xae,0xa2,0x19,0xcd,0x5d,0xc7,0xdd,
        0x30,0x50,0x66,0x7a,0x5d,0x80,0x43,0xc3,0x93,0x11,0xa2,0x7e,0xe3,0x7f,0x87,0x5c,
        0xc9,0x00,0x96,0x57,0x5c,0x1d,0xe0,0xe9,0xf0,0xb9,0x5c,0x1c,0xa3,0x4b,0x60,0xc2];
    // ActiveAuth signature
    let active_auth_dg15_pubkey_offset: u16 = 32;
    let active_auth_sig: [u8; 128] = [
        0x59,0x3b,0x77,0xe7,0xc0,0xd3,0x09,0x0d,0x6f,0xea,0xe5,0x69,0x3c,0x44,0x6e,0x23,
        0x37,0x9a,0xeb,0xde,0x57,0xc8,0xc2,0x18,0x80,0x5d,0xf6,0x85,0x0c,0x52,0x4a,0x99,
        0x43,0x36,0x6a,0x76,0xd5,0xe6,0x86,0xd3,0x96,0x92,0xe1,0xad,0xb6,0x7b,0xa7,0x37,
        0xc4,0x29,0xcb,0x17,0xfb,0xcd,0x09,0x59,0x4e,0xf8,0xbb,0x45,0x35,0x32,0x6c,0x2e,
        0x0a,0xea,0x9b,0xfd,0x21,0xcf,0xb2,0x47,0x83,0x25,0x2f,0xac,0xc4,0x63,0x43,0xde,
        0x48,0x69,0x4f,0xa0,0xda,0x70,0xf6,0xd9,0xe0,0xb8,0x6f,0xb3,0xbd,0x54,0x70,0x8d,
        0x0f,0x7e,0x65,0x60,0x06,0xac,0x4a,0x08,0x37,0x7e,0x2d,0xc4,0xfa,0x84,0x2a,0x8a,
        0xbb,0xd9,0x3b,0x6f,0x45,0xca,0x04,0x7f,0x40,0xf7,0x7e,0x51,0x64,0xe0,0x23,0x46];
    let active_auth_final_e: [u8; 128] = [
        0x76,0x52,0xa4,0x34,0x67,0x65,0x5f,0x8d,0x91,0xf7,0xbf,0x95,0x3a,0x3c,0xd3,0xa0,
        0xc3,0x8b,0x0d,0x33,0x07,0x3c,0x30,0x4a,0x43,0xb7,0xdd,0x5f,0xee,0xdf,0xc6,0xd2,
        0xf9,0x9a,0x6c,0x6f,0xce,0x5a,0x61,0x8e,0xe6,0x63,0x62,0xa4,0x90,0xa7,0x75,0x64,
        0xf5,0x40,0x1f,0xc3,0x47,0xc6,0x86,0x14,0xfa,0x39,0x58,0xa7,0x3d,0xa0,0x75,0xa5,
        0x0e,0x90,0x5a,0xe0,0x2a,0xf1,0x6f,0x9b,0xfd,0xb5,0x4a,0xe1,0xb3,0xd2,0xa3,0x70,
        0x9f,0xf0,0xab,0x29,0xfa,0x18,0xbb,0x5a,0x3d,0x58,0xf0,0xc2,0xb6,0x2b,0x6a,0xaf,
        0x1b,0x39,0x62,0x79,0x97,0xf1,0x0f,0x39,0x9e,0x9c,0x3e,0x56,0x97,0xe7,0xdb,0x21,
        0x9f,0x56,0x4f,0x2e,0xc4,0xff,0x2c,0xe2,0x3b,0x38,0x39,0xa1,0xcb,0xf6,0xa1,0xff];
    let active_auth_sig_quotient: [u8; 128] = [
        0x51,0x6d,0xc3,0x04,0x87,0xa8,0xc7,0x1c,0x4d,0xe7,0x66,0xab,0x26,0x60,0x6c,0x6c,
        0x47,0x4e,0x6d,0x0d,0x5a,0x05,0xc3,0x8f,0x65,0xf4,0x60,0x30,0x2f,0xc8,0x7c,0x6d,
        0xeb,0xbf,0x05,0x1c,0x1b,0x3d,0x01,0x52,0x61,0x61,0x67,0x5b,0xb2,0x2c,0xa6,0xb4,
        0x2a,0xce,0x0c,0x65,0xe6,0x7d,0xaa,0x51,0xf8,0x98,0x36,0xc9,0x0d,0xd6,0x07,0xb7,
        0xb7,0xae,0xff,0xdc,0x33,0x25,0x11,0x6f,0x63,0x98,0x57,0x86,0x76,0x92,0xc3,0x42,
        0xfa,0x14,0x45,0xfb,0x4b,0x1f,0x37,0x2a,0xce,0xa5,0x7c,0x55,0x9e,0x9e,0x94,0x85,
        0x3e,0x8c,0xc5,0x9b,0xc9,0x7b,0x83,0xe2,0x8f,0x7c,0x0d,0x8b,0x2a,0x9c,0xaf,0xaf,
        0x56,0xac,0x8a,0x30,0x9d,0xd4,0xf6,0xdb,0x39,0x24,0x28,0x23,0xf1,0x23,0x6e,0x3e];
    let active_auth_challenge: [u8; 8] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];
    // Allowed certificate pubkeys merkle tree
    let cert_pubkeys_mtree_root = 0x1281be6251b0c14f70d42165ee9a26c45685b9a151e0e79336191bb8fb560b19;
    let cert_pubkeys_mtree_index = 0;
    let cert_pubkeys_mtree_hashpath = [
      0x2df8b940e5890e4e1377e05373fae69a1d754f6935e6a780b666947431f2cdcd,
      0x0ae10b4fc8200c0d61ab3b00570ecf3df60c2e4679ee4c5bfb01fc0f69fa623e,
      0x24851dc3db043e149ed2860f355ae632e1ec3ce5475080c12789d7cee84af219,
      0x141548713c20d60ae4383d4652e09b1b9a1b39f4ed6353a3c0367b8ec9180b69,
      0x2ecf57a46782cea2f32ed1b8d988f814faabb498d336b3544b2a3be3c69ccd14,
      0x0d459c69f13c5b1d60cc66d2cf7e9f4cde2eb65f5aee3b739f855f7363ead9d0,
      0x1d09fb6ea6b09152bd8d3283c5a5cb8a212478ad6f56e1f7b3e388f6bff205e4,
      0x2bb51b043a79e2e96db5c8428ce281d48a62ca303db0a98a156c67ea5c3d1314];
    // Allowed countries merkle tree
    let countries_mtree_root = 0x0dd9d5b6db78ee2e4e93254bb7707af58f75bf50706c7ea9ba904c8a9fe506e5;
    let countries_mtree_index = 23;
    let countries_mtree_hashpath = [
      0x0000000000000000000000000000000000000000000000000000000000435249,
      0x2b507018bf167945cd40e9d189eebd17947e923679d47c8ff39005ec75bec19f,
      0x07cf67991087ea378ff64968f6048f0086a0464e1c25c91e46bf9bfba194a78f,
      0x1f841d58b08dd158e82270bf6fda09d8f9c40c1edb6dbd70aa2968ea22e985e6,
      0x1e80b14a13092c98e18e16338f3ea3e5d49b7be96024549c88a4d0acebf3248a,
      0x251754b7a4e5caaeaa65d24411b422c8e8c7092e3dc03cad7e3ad999cfb9b076,
      0x0f54eac0786dd36ada1d346a15536ed227bc539f761938d5331862e6607b8175,
      0x2bb51b043a79e2e96db5c8428ce281d48a62ca303db0a98a156c67ea5c3d1314];

    let anon_id = verify_zkpassport_country(
        dg1,
        name,
        nationality,
        expiry,
        current_year,
        current_month,
        current_day,
        pivot_year,
        sod_sig,
        sod_pubkey,
        sod_final_e,
        sod_sig_quotient,
        dg15,
        dg15_len,
        signed_hashes,
        signed_hashes_len,
        signed_hashes_dg1_hash_offset,
        signed_hashes_dg15_hash_offset,
        signed_attributes,
        signed_attributes_len,
        signed_attributes_signed_hashes_hash_offset,
        sig_decrypted_signed_attributes_hash_offset,
        cert_pubkeys_mtree_root,
        cert_pubkeys_mtree_index,
        cert_pubkeys_mtree_hashpath,
        countries_mtree_root,
        countries_mtree_index,
        countries_mtree_hashpath,
    );
    assert(anon_id == 0x0bdc4ab621ad9cd32b94bf6ca3ceec66ae319a1e53fb192bb6812d01d6898f92);

    let anon_id = verify_zkpassport_country_active_auth(
        dg1,
        name,
        nationality,
        expiry,
        current_year,
        current_month,
        current_day,
        pivot_year,
        active_auth_challenge,
        sod_sig,
        sod_pubkey,
        sod_final_e,
        sod_sig_quotient,
        dg15,
        dg15_len,
        signed_hashes,
        signed_hashes_len,
        signed_hashes_dg1_hash_offset,
        signed_hashes_dg15_hash_offset,
        signed_attributes,
        signed_attributes_len,
        signed_attributes_signed_hashes_hash_offset,
        sig_decrypted_signed_attributes_hash_offset,
        active_auth_dg15_pubkey_offset,
        active_auth_sig,
        active_auth_final_e,
        active_auth_sig_quotient,
        cert_pubkeys_mtree_root,
        cert_pubkeys_mtree_index,
        cert_pubkeys_mtree_hashpath,
        countries_mtree_root,
        countries_mtree_index,
        countries_mtree_hashpath,
    );
    assert(anon_id == 0x0bdc4ab621ad9cd32b94bf6ca3ceec66ae319a1e53fb192bb6812d01d6898f92);
}
